name: Build DuckDB Lambda Layers

on:
  push:
    branches: [ main ]

env:
  DUCKDB_VERSION: '0.8.0'

jobs:

  # build_geo_extension:
  #   name: Build and store geo extension
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Build geo extension
  #       run: |
  #         # Create release folder
  #         mkdir -p $PWD/release

  #         # Run build
  #         docker build -t duckdb-geo-extension -f Dockerfile.geo .

  #         # Copy release from image
  #         docker run -v $PWD/release:/opt/mount --rm --entrypoint /bin/bash duckdb-geo-extension -c "cp /tmp/release/geo.duckdb_extension /opt/mount/"

  #     - name: Upload geo extension artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: geo-extension
  #         path: release/geo.duckdb_extension
  
  # build_prql_extension:
  #   name: Build and store prql extension
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Build prql extension
  #       run: |
  #         # Create release folder
  #         mkdir -p $PWD/release

  #         # Run build
  #         docker build -t duckdb-prql-extension -f Dockerfile.prql .

  #         # Copy release from image
  #         docker run -v $PWD/release:/opt/mount --rm --entrypoint /bin/bash duckdb-prql-extension -c "cp /tmp/release/prql.duckdb_extension /opt/mount/"

  #     - name: Upload prql extension artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: prql-extension
  #         path: release/prql.duckdb_extension

  # build_scrooge_extension:
  #   name: Build and store scrooge extension
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Build scrooge extension
  #       run: |
  #         # Create release folder
  #         mkdir -p $PWD/release

  #         # Run build
  #         docker build -t duckdb-scrooge-extension -f Dockerfile.scrooge .

  #         # Copy release from image
  #         docker run -v $PWD/release:/opt/mount --rm --entrypoint /bin/bash duckdb-scrooge-extension -c "cp /tmp/release/scrooge.duckdb_extension /opt/mount/"

  #     - name: Upload scrooge extension artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: scrooge-extension
  #         path: release/scrooge.duckdb_extension
  
  build_duckdb_node_x86_64:
    name: Build DuckDB Node Lambda layer for x86_64
    runs-on: ubuntu-latest
    env:
      ARCHITECTURE: x86_64

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build layer
        run: |
          # Create release folder
          mkdir -p $PWD/release

          # Run build
          docker build --build-arg DUCKDB_VERSION=$DUCKDB_VERSION --build-arg ARCHITECTURE=$ARCHITECTURE -t duckdb-lambda-$ARCHITECTURE -f Dockerfile.$ARCHITECTURE .

          # Copy release from image
          docker run -v $PWD/release:/opt/mount --rm --entrypoint /bin/bash duckdb-lambda-$ARCHITECTURE -c "cp /tmp/release/duckdb-layer-$ARCHITECTURE.zip /opt/mount/"

      - name: Upload DuckDB Node build artifact
        uses: actions/upload-artifact@v3
        with:
          name: duckdb-node-x86_64-zip
          path: release/duckdb-layer-$ARCHITECTURE.zip

  build_duckdb_node_arm64:
    name: Build DuckDB Node Lambda layer for arm64
    runs-on: ubuntu-latest
    env:
      ARCHITECTURE: arm64

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build layer
        run: |
          # Create release folder
          mkdir -p $PWD/release

          # Run build
          docker buildx build --platform linux/arm64/v8 --build-arg DUCKDB_VERSION=$DUCKDB_VERSION --build-arg ARCHITECTURE=$ARCHITECTURE -t duckdb-lambda-$ARCHITECTURE -f Dockerfile.$ARCHITECTURE .

          # Copy release from image
          docker run -v $PWD/release:/opt/mount --rm --entrypoint /bin/bash duckdb-lambda-$ARCHITECTURE -c "cp /tmp/release/duckdb-layer-$ARCHITECTURE.zip /opt/mount/"

      - name: Upload DuckDB Node build artifact
        uses: actions/upload-artifact@v3
        with:
          name: duckdb-node-arm64-zip
          path: release/duckdb-layer-$ARCHITECTURE.zip

  publish_npm_package_x86:
    name: Publish duckdb-lambda npm x86 package
    runs-on: ubuntu-latest
    needs: [build_duckdb_node_x86_64]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          registry-url: 'https://registry.npmjs.org'

      - uses: actions/download-artifact@v3
        with:
          name: duckdb-node-x86_64-zip

      - name: Check for changes and eventually publish new package version
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: bash $GITHUB_WORKSPACE/publish_package.sh

  publish_layer_without_extensions:
    name: Publish layer without extensions
    runs-on: ubuntu-latest
    needs: [build_duckdb_node_x86_64, build_duckdb_node_arm64]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: duckdb-node-x86_64-zip

      - uses: actions/download-artifact@v3
        with:
          name: duckdb-node-arm64-zip

      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@v1

      - name: Publish layer for x86_64
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_EC2_METADATA_DISABLED: 'true'
        run: bash $GITHUB_WORKSPACE/publish_layer.sh x86_64

      - name: Publish layer for arm64
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_EC2_METADATA_DISABLED: 'true'
        run: bash $GITHUB_WORKSPACE/publish_layer.sh arm64

  # publish_layer_with_extensions:
  #   name: Publish layer with extensions
  #   runs-on: ubuntu-latest
  #   needs: [build_geo_extension, build_prql_extension, build_scrooge_extension, build_duckdb_node]

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: duckdb-node-zip

  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: geo-extension

  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: prql-extension

  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: scrooge-extension

  #     - name: Repackage & build layer
  #       run: |
  #         # Export extension dir
  #         export EXTENSION_DIR="$PWD/layer/nodejs/node_modules/duckdb/extensions"

  #         # Create layer folder
  #         mkdir -p $PWD/layer

  #         ls -la

  #         # Unzip to layer folder
  #         unzip -d layer/ $PWD/duckdb-layer.zip

  #         # Delete original archive
  #         rm $PWD/duckdb-layer.zip

  #         # Create extension directory
  #         mkdir -p $EXTENSION_DIR

  #         # Add extensions
  #         mv $PWD/geo.duckdb_extension $EXTENSION_DIR
  #         mv $PWD/prql.duckdb_extension $EXTENSION_DIR
  #         mv $PWD/scrooge.duckdb_extension $EXTENSION_DIR

  #         # Show directory structure
  #         tree $PWD/layer

  #         # Zip layer
  #         cd $PWD/layer && zip -q -r ../duckdb-layer.zip . && cd ..

  #     - name: Install AWS CLI
  #       uses: unfor19/install-aws-cli-action@v1

  #     - name: Publish layer
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         AWS_EC2_METADATA_DISABLED: 'true'
  #       run: bash $PWD/publish_layer.sh duckdb-nodejs-extensions-test-x86
